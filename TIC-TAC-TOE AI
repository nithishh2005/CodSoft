import math
board = [' ' for _ in range(9)]
def print_board(board):
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

def is_winner(board, player):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ]
    return any(all(board[pos] == player for pos in condition) for condition in win_conditions)
def is_board_full(board):
    return ' ' not in board
def get_available_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']
def minimax(board, depth, alpha, beta, is_maximizing):
    if is_winner(board, 'O'):
        return 1
    if is_winner(board, 'X'):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for move in get_available_moves(board):
            board[move] = 'O'
            eval = minimax(board, depth + 1, alpha, beta, False)
            board[move] = ' '
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves(board):
            board[move] = 'X'
            eval = minimax(board, depth + 1, alpha, beta, True)
            board[move] = ' '
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval
def ai_move(board):
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        board[move] = 'O'
        score = minimax(board, 0, -math.inf, math.inf, False)
        board[move] = ' '
        if score > best_score:
            best_score = score
            best_move = move
    return best_move
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != ' ':
            print("Invalid move, Try again!")
            continue
        board[move] = 'X'

        if is_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        if is_board_full(board):
            print_board(board)
            print("It is a tie!")
            break
        board[ai_move(board)] = 'O'

        print_board(board)

        if is_winner(board, 'O'):
            print("AI wins!")
            break

        if is_board_full(board):
            print("It is a tie!")
            break

play_game()
